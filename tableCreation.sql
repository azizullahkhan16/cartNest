----------------------------------DDL commands-----------------------------------------------

--Buyer table
CREATE TABLE "BUYER" (	
    "BUYER_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
    "FIRST_NAME" VARCHAR2(100 BYTE), 
    "LAST_NAME" VARCHAR2(100 BYTE), 
    "EMAIL" VARCHAR2(100 BYTE), 
    "PASSWORD" VARCHAR2(100 BYTE), 
    "PHONE" NUMBER, 
    "ADDRESS" VARCHAR2(255 BYTE), 
    "IMAGE" VARCHAR2(255 BYTE)
);

select * from cart;

--Seller table
CREATE TABLE "SELLER" (	
    "SELLER_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
    "FIRST_NAME" VARCHAR2(100 BYTE), 
    "LAST_NAME" VARCHAR2(100 BYTE), 
    "EMAIL" VARCHAR2(100 BYTE), 
    "PASSWORD" VARCHAR2(100 BYTE), 
    "PHONE" NUMBER, 
    "ADDRESS" VARCHAR2(255 BYTE)
);

--Store table 
CREATE TABLE "STORE" (	
    "STORE_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
    "STORE_NAME" VARCHAR2(255 BYTE), 
    "STORE_OWNER" NUMBER, 
    "CONTACT_INFO" VARCHAR2(50 BYTE), 
    "DESCRIPTION" VARCHAR2(1000 BYTE), 
    "CREATION_DATE" DATE,
    "STORE_TYPE"  VARCHAR2(255 BYTE)
);

--cart table
CREATE TABLE "CART" (	
    "CART_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
    "USEREMAIL" VARCHAR2(255 BYTE), 
    "PRODUCT_ID" NUMBER, 
    "COUNT" NUMBER DEFAULT 0, 
    "IS_DELETED" NUMBER(1,0) DEFAULT 0,
    "DATE_TIME" DATE DEFAULT SYSDATE
);

-- wishlist table
 CREATE TABLE "WISHLIST" (	
  "WISHLIST_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
    "USEREMAIL" VARCHAR2(255 BYTE), 
    "PRODUCT_ID" NUMBER, 
    "IS_DELETED" NUMBER(1,0) DEFAULT 0,
    "DATE_TIME" DATE DEFAULT SYSDATE
) ;

--category table
CREATE TABLE "CATEGORY" (	
    "CATEGORY_NAME" VARCHAR2(255 BYTE), 
	"DESCRIPTION" VARCHAR2(1000 BYTE)
);
select * from category;

insert into category (category_name, description)
values ('Others', 'From unique finds to miscellaneous items, this section offers a wide range of products to suit various needs and preferences.');

--product_category
CREATE TABLE "PRODUCT_CATEGORY" (	
    "PRODUCT_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
    "NAME" VARCHAR2(255 BYTE), 
    "PRICE" NUMBER, 
    "STOCK" NUMBER, 
    "SOLD" NUMBER DEFAULT 0, 
    "RATING" NUMBER DEFAULT 0, 
    "DESCRIPTION" VARCHAR2(1000 BYTE), 
    "IMAGE" VARCHAR2(1000 BYTE), 
    "DEAL_NEWPRICE" NUMBER, 
    "OWNER" VARCHAR2(255 BYTE), 
    "CATEGORY" VARCHAR2(255 BYTE),
    "DATE_OF_ADDITION" DATE DEFAULT SYSDATE
) ;
   
select * from category;
   
 CREATE TABLE "PRODUCT_STORE"(	
    "PRODUCT_STORE_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
    "PRODUCT_ID" NUMBER, 
    "STORE_ID" NUMBER, 
    "STOCK_QUANTITY" NUMBER, 
    "DISCOUNT" NUMBER
) ; 
   

CREATE TABLE "ORDERS" (	
    "ORDER_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
    "USEREMAIL" VARCHAR2(255 BYTE),
    "ORDER_DATE" DATE DEFAULT SYSDATE, 
    "STATUS" VARCHAR2(50 BYTE) DEFAULT 'Pending', 
    "SHIPPING_ADDRESS" VARCHAR2(255 BYTE), 
    "ESTIMATED_DELIVERY" VARCHAR2(255 BYTE), 
    "TOTAL_COST" NUMBER, 
    "SUBTOTAL" NUMBER, 
    "SHIPPING_COST" NUMBER, 
    "TAX" NUMBER
);


CREATE TABLE "ORDER_ITEM" (	
    "ORDER_ITEM_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
    "ORDER_ID" NUMBER,
    "SELLER" VARCHAR2(255 BYTE),
    "PRODUCT_ID" NUMBER, 
    "QUANTITY" NUMBER, 
    "UNIT_PRICE" NUMBER, 
    "TOTAL_PRICE" NUMBER
);

---------------------------------Procedures---------------------------------------------------------------------

--Procedure for seller and store
CREATE OR REPLACE EDITIONABLE PROCEDURE "CREATE_SELLER_AND_STORE" (
  p_first_name VARCHAR2,
  p_last_name VARCHAR2,
  p_email VARCHAR2,
  p_password VARCHAR2,
  p_phone NUMBER,
  p_address VARCHAR2,
  p_store_name VARCHAR2,
  p_description VARCHAR2,
  p_store_type VARCHAR2
) AS
  l_seller_id NUMBER;
BEGIN
  -- Insert into Seller table
  INSERT INTO Seller (first_name, last_name, email, password, phone, address)
  VALUES (p_first_name, p_last_name, p_email, p_password, p_phone, p_address)
  RETURNING seller_id INTO l_seller_id;

  -- Print the assigned seller_id
  DBMS_OUTPUT.PUT_LINE('Assigned Seller ID: ' || l_seller_id);

  -- Insert into Store table without specifying STORE_ID
  INSERT INTO Store (store_name, store_owner, contact_info, description, creation_date, store_type)
  VALUES (p_store_name, l_seller_id, p_phone, p_description, SYSDATE, p_store_type);

  COMMIT;
END;
/

---------------------------------Constraints---------------------------------------
--Buyer table
ALTER TABLE "BUYER" MODIFY ("BUYER_ID" NOT NULL ENABLE);
ALTER TABLE "BUYER" MODIFY ("FIRST_NAME" NOT NULL ENABLE);
ALTER TABLE "BUYER" MODIFY ("LAST_NAME" NOT NULL ENABLE);
ALTER TABLE "BUYER" MODIFY ("EMAIL" NOT NULL ENABLE);
ALTER TABLE "BUYER" MODIFY ("PASSWORD" NOT NULL ENABLE);
ALTER TABLE "BUYER" MODIFY ("PHONE" NOT NULL ENABLE);
ALTER TABLE "BUYER" MODIFY ("ADDRESS" NOT NULL ENABLE);
ALTER TABLE "BUYER" ADD PRIMARY KEY ("BUYER_ID")
USING INDEX  ENABLE;
ALTER TABLE "BUYER" ADD UNIQUE ("EMAIL")
USING INDEX  ENABLE;

--Seller table
ALTER TABLE "SELLER" MODIFY ("SELLER_ID" NOT NULL ENABLE);
ALTER TABLE "SELLER" MODIFY ("FIRST_NAME" NOT NULL ENABLE);
ALTER TABLE "SELLER" MODIFY ("LAST_NAME" NOT NULL ENABLE);
ALTER TABLE "SELLER" MODIFY ("EMAIL" NOT NULL ENABLE);
ALTER TABLE "SELLER" MODIFY ("PASSWORD" NOT NULL ENABLE);
ALTER TABLE "SELLER" MODIFY ("PHONE" NOT NULL ENABLE);
ALTER TABLE "SELLER" MODIFY ("ADDRESS" NOT NULL ENABLE);
ALTER TABLE "SELLER" ADD PRIMARY KEY ("SELLER_ID")
USING INDEX  ENABLE;
ALTER TABLE "SELLER" ADD UNIQUE ("EMAIL")
USING INDEX  ENABLE;

--Cart table
ALTER TABLE "CART" MODIFY ("PRODUCT_ID" NOT NULL ENABLE);
  ALTER TABLE "CART" ADD PRIMARY KEY ("CART_ID")
  USING INDEX  ENABLE;

--Wishlist table 
ALTER TABLE "WISHLIST" MODIFY ("PRODUCT_ID" NOT NULL ENABLE);
  ALTER TABLE "WISHLIST" ADD PRIMARY KEY ("WISHLIST_ID")
  USING INDEX  ENABLE;  
  
  
--Category table  
 ALTER TABLE "CATEGORY" ADD PRIMARY KEY ("CATEGORY_NAME")
  USING INDEX  ENABLE;  
  
  
--Product_category table   
ALTER TABLE "PRODUCT_CATEGORY" MODIFY ("PRODUCT_ID" NOT NULL ENABLE);
  ALTER TABLE "PRODUCT_CATEGORY" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "PRODUCT_CATEGORY" MODIFY ("PRICE" NOT NULL ENABLE);
  ALTER TABLE "PRODUCT_CATEGORY" MODIFY ("STOCK" NOT NULL ENABLE);
  ALTER TABLE "PRODUCT_CATEGORY" ADD PRIMARY KEY ("PRODUCT_ID")
  USING INDEX  ENABLE;

--Product_Store table
  ALTER TABLE "PRODUCT_STORE" MODIFY ("PRODUCT_STORE_ID" NOT NULL ENABLE);
  ALTER TABLE "PRODUCT_STORE" ADD PRIMARY KEY ("PRODUCT_STORE_ID")
  USING INDEX  ENABLE;
 
--Order table 
ALTER TABLE "ORDERS" MODIFY ("ORDER_ID" NOT NULL ENABLE);
  ALTER TABLE "ORDERS" MODIFY ("ORDER_DATE" NOT NULL ENABLE);
  ALTER TABLE "ORDERS" MODIFY ("SHIPPING_ADDRESS" NOT NULL ENABLE);
  ALTER TABLE "ORDERS" MODIFY ("TOTAL_COST" NOT NULL ENABLE);
  ALTER TABLE "ORDERS" MODIFY ("SUBTOTAL" NOT NULL ENABLE);
  ALTER TABLE "ORDERS" MODIFY ("SHIPPING_COST" NOT NULL ENABLE);
  ALTER TABLE "ORDERS" MODIFY ("TAX" NOT NULL ENABLE);
  ALTER TABLE "ORDERS" ADD PRIMARY KEY ("ORDER_ID")
  USING INDEX  ENABLE;


--Order-item table
 ALTER TABLE "ORDER_ITEM" MODIFY ("ORDER_ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "ORDER_ITEM" MODIFY ("QUANTITY" NOT NULL ENABLE);
  ALTER TABLE "ORDER_ITEM" MODIFY ("UNIT_PRICE" NOT NULL ENABLE);
  ALTER TABLE "ORDER_ITEM" MODIFY ("TOTAL_PRICE" NOT NULL ENABLE);
  ALTER TABLE "ORDER_ITEM" ADD PRIMARY KEY ("ORDER_ITEM_ID")
  USING INDEX  ENABLE;  

---------------------------Triggers---------------------------

 CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_BEFORE_STOCK_UPDATE" 
BEFORE UPDATE ON product_category
FOR EACH ROW
BEGIN
  IF :NEW.stock < 0 THEN
    :NEW.stock := 0; -- Prevent negative stock values
  END IF;

  -- Update stock_quantity in Product_Store
  UPDATE product_store
  SET stock_quantity = :NEW.stock
  WHERE product_id = :NEW.product_id;
END;

/
ALTER TRIGGER "TRG_BEFORE_STOCK_UPDATE" ENABLE;

---------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_CALCULATE_TOTAL_PRICE" 
BEFORE INSERT OR UPDATE ON order_item
FOR EACH ROW
BEGIN
  :NEW.total_price := :NEW.unit_price * :NEW.quantity;
END;

/
ALTER TRIGGER "TRG_CALCULATE_TOTAL_PRICE" ENABLE;

-----------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_INSERT_PRODUCT_STORE" 
AFTER INSERT ON Product_Category
FOR EACH ROW
DECLARE
  l_product_store_id NUMBER;
BEGIN
  -- Insert into Product_Store table
  SELECT store_id INTO l_product_store_id FROM STORE WHERE STORE_OWNER = :NEW.owner;

  INSERT INTO Product_Store (product_id, store_id, stock_quantity, discount)
  VALUES (:NEW.product_id, l_product_store_id, :NEW.stock, 0);

END;

/
ALTER TRIGGER "TRG_INSERT_PRODUCT_STORE" ENABLE;

------------

 CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_VALIDATE_UNIT_PRICE" 
BEFORE INSERT OR UPDATE ON order_item
FOR EACH ROW
DECLARE
  v_product_price NUMBER;
BEGIN
  -- Get the price of the corresponding product
  SELECT price INTO v_product_price
  FROM product_category
  WHERE product_id = :NEW.product_id;

  -- Check if the unit_price matches the product price
  IF :NEW.unit_price <> v_product_price THEN
    RAISE_APPLICATION_ERROR(-20001, 'Unit price does not match the actual price of the product.');
  END IF;
END;

/
ALTER TRIGGER "TRG_VALIDATE_UNIT_PRICE" ENABLE;

------------------------------------------Functions-----------------------------------------

CREATE OR REPLACE FUNCTION insert_order(
    p_useremail VARCHAR2,
    p_shipping_address VARCHAR2,
    p_total_cost NUMBER,
    p_subtotal NUMBER,
    p_shipping_cost NUMBER,
    p_tax NUMBER
) RETURN NUMBER
IS
  l_order_id NUMBER;
BEGIN
  INSERT INTO orders (
    useremail,
    order_date,
    shipping_address,
    total_cost,
    subtotal,
    shipping_cost,
    tax
  )
  VALUES (
    p_useremail,
    SYSTIMESTAMP,
    p_shipping_address,
    p_total_cost,
    p_subtotal,
    p_shipping_cost,
    p_tax
  )
  RETURNING order_id INTO l_order_id;

  RETURN l_order_id;
END insert_order;
/